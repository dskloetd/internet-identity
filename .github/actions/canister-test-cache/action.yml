name: 'canister-test-cache'
description: Provides a layered build cache for canister tests
runs:
  using: "composite"
  steps:
    # Figure out which commit modified what. Each commit defined here is used as a cache layer.
    # We use those commit shas as cache keys. Since cargo uses timestamp-based comparison,
    # each cache layer is retrieved and timestamped when the particular commit is checked out,
    # so that checking out a later commit tells cargo which files are newer (since git will
    # update the mtime of newer files)
    - name: Retrieve commit information
      id: git_info
      shell: bash
      run: |
        # Last time dependencies or toolchain were updated; used for ~/.cargo and dependencies
        commit_deps=$(git log -1 --pretty=format:%H -- Cargo.* src/*/Cargo.toml rust-toolchain.toml)
        echo "::set-output name=commit_deps::$commit_deps"
        echo "deps: $commit_deps"

        # Last time the canister code was modified
        commit_canister=$(git log -1 --pretty=format:%H -- 'src/**' ':^src/frontend')
        echo "::set-output name=commit_canister::$commit_canister"
        echo "canister: $commit_canister"

        # This commit
        commit_now=$(git log -1 --pretty=format:%H)
        echo "::set-output name=commit_now::$commit_now"
        echo "now: $commit_now"

    - uses: ./.github/actions/bootstrap

    # Rustup only installs cargo on the first call, so we use a dedicated step to get a good idea of how
    # time is spent in each step separately
    - run: cargo check --help

    - name: Create dummy assets
      shell: bash
      run: |
        mkdir dist
        touch dist/index.html
        touch dist/index.js.gz
        touch dist/index.css
        touch dist/loader.webp
        touch dist/favicon.ico
        touch dist/ic-badge.svg

    # Caching ~/.cargo
    # 
    # At every step (cargo cache, deps, etc) we store the cache content to a temporary
    # directory so that the cache is kept as it was right after the layer build until
    # the actions/cache post step is run (which only then uploads the cache)
    - uses: actions/cache@v3
      id: cache-dot-cargo
      with:
        path: /tmp/dot-cargo
        key: ${{ runner.os }}-${{ steps.git_info.outputs.commit_deps }}-dot-cargo

    - name: Checkout last dependency change
      shell: bash
      run: git checkout ${{ steps.git_info.outputs.commit_deps }}

    - name: Cargo cache (recovery)
      if: steps.cache-dot-cargo.outputs.cache-hit == 'true'
      run: |
        rsync -av "/tmp/dot-cargo/" "$HOME/.cargo/"
        find "$HOME/.cargo/" -exec touch -t "$(date +%Y%m%d%H%M.%S)" {} +

    - name: Cargo cache (build)
      shell: bash
      run: cargo fetch --locked

    - name: Cargo cache (save to cache)
      shell: bash
      if: steps.cache-dot-cargo.outputs.cache-hit != 'true'
      run: rsync -av "$HOME/.cargo/" "/tmp/dot-cargo/"

    # Caching external dependencies
    - uses: actions/cache@v3
      id: cache-deps
      with:
        path: /tmp/target-deps
        key: ${{ runner.os }}-${{ steps.git_info.outputs.commit_deps }}-deps

    - name: Dependencies (recovery)
      if: steps.cache-deps.outputs.cache-hit == 'true'
      shell: bash
      run: |
        rsync -av "/tmp/target-deps/" "$PWD/target/"
        mtime=$(date +%Y%m%d%H%M.%S)
        find ./target -exec touch -t "$mtime" {} +
        # Here we touch the cache itself so that when diffing (with --compare-dest)
        # rsync knows what is _newer_ than what we've restored here
        find "/tmp/target-deps/" -exec touch -t "$mtime" {} +

    - name: Dependencies (build)
      shell: bash
      run: cargo build --tests --release --frozen

    - name: Dependencies (save to cache)
      if: steps.cache-deps.outputs.cache-hit != 'true'
      shell: bash
      run: rsync -av "$PWD/target/" "/tmp/target-deps/"

    # Caching canister code and tests
    - uses: actions/cache@v3
      id: cache-canister
      with:
        path: /tmp/target-canister
        key: ${{ runner.os }}-${{ steps.git_info.outputs.commit_canister }}-canister

    - run: git checkout ${{ steps.git_info.outputs.commit_canister }}

    - name: Canister code (recover)
      if: steps.cache-canister.outputs.cache-hit == 'true'
      shell: bash
      run: |
        # Set timestamps so that --compare-dest below knows what (not) to save
        find /tmp/target-canister -exec touch -t "$(date +%Y%m%d%H%M.%S)" {} +
        rsync -av /tmp/target-canister/ "$PWD/target/"

    - name: Canister code (build)
      shell: bash
      run: cargo build --tests --release --frozen

    - name: Canister code (save to cache)
      if: steps.cache-canister.outputs.cache-hit != 'true'
      shell: bash
      # Here we only store what's been built since the dependency cache restore. Saving the whole
      # ./target again would take another ~800MB (compressed) whereas the diff only takes ~20MB.
      run: rsync -av --compare-dest="/tmp/target-deps/" "$PWD/target/" "/tmp/target-canister/"
